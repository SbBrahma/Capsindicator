import tkinter as tk
from tkinter import ttk
import ctypes

class CapsNumLockIndicator(tk.Tk):
    def __init__(self):
        super().__init__()
        
        # Initialize variables for dragging
        self._drag_start_x = 0
        self._drag_start_y = 0
        
        # Set window properties
        self.title("Caps & Num Lock Indicator")
        self.geometry("150x50")
        self.configure(bg="#383838")  # Set background color
        self.overrideredirect(True)  # Remove window decorations
        self.attributes("-topmost", True)  # Float on top of other windows
        self.resizable(False, False)  # Disable resizing
        
        # Create style
        self.style = ttk.Style()
        
        # Configure style for labels
        self.style.configure("CapsLabel.TLabel", foreground="#FF4500", background="#383838", font=("Arial", 8))
        self.style.configure("NumLabel.TLabel", foreground="#32CD32", background="#383838", font=("Arial", 8))
        
        # Create label for Caps Lock indicator
        self.caps_label = ttk.Label(self, text="CAPS LOCK", style="CapsLabel.TLabel")
        self.caps_label.pack(side=tk.TOP, pady=2)
        
        # Create label for Num Lock indicator
        self.num_label = ttk.Label(self, text="NUM LOCK", style="NumLabel.TLabel")
        self.num_label.pack(side=tk.TOP, pady=2)
        
        # Bind mouse events for dragging
        self.bind("<ButtonPress-1>", self.start_move)
        self.bind("<B1-Motion>", self.on_move)
        
        # Bind keyboard event to close window (Escape key)
        self.bind("<Escape>", self.close_window)
        
        # Check Caps Lock and Num Lock status
        self.update_status()
        
        # Update status every 200 milliseconds
        self.after(200, self.update_status)
        
    def start_move(self, event):
        self._drag_start_x = event.x
        self._drag_start_y = event.y
        
    def on_move(self, event):
        x = self.winfo_pointerx() - self._drag_start_x
        y = self.winfo_pointery() - self._drag_start_y
        
        # Adjust position to stay within screen boundaries
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        if x < 0:
            x = 0
        elif x + self.winfo_width() > screen_width:
            x = screen_width - self.winfo_width()
        
        if y < 0:
            y = 0
        elif y + self.winfo_height() > screen_height:
            y = screen_height - self.winfo_height()
        
        self.geometry("+{}+{}".format(x, y))
        
    def update_status(self):
        # Check Caps Lock status
        caps_lock_state = ctypes.windll.user32.GetKeyState(0x14) & 0xffff != 0
        if caps_lock_state:
            self.caps_label.config(text="CAPS LOCK: ON", foreground="#32CD32")  # Change color to green
        else:
            self.caps_label.config(text="CAPS LOCK: OFF", foreground="#FF4500")  # Change color to red
        
        # Check Num Lock status
        num_lock_state = ctypes.windll.user32.GetKeyState(0x90) & 0xffff != 0
        if num_lock_state:
            self.num_label.config(text="NUM LOCK: ON", foreground="#32CD32")  # Change color to green
        else:
            self.num_label.config(text="NUM LOCK: OFF", foreground="#FF4500")  # Change color to red
        
        # Schedule the next update
        self.after(200, self.update_status)
        
    def close_window(self, event):
        self.destroy()

# Create and run the application
app = CapsNumLockIndicator()
app.mainloop()
